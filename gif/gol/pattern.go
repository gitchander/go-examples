package main

import (
	"unicode/utf8"

	"github.com/gitchander/go-examples/gif/gol/life"
)

type Pattern struct {
	Lines  []string
	Target rune
}

var (
	// Kok's galaxy
	patternGalaxy = Pattern{
		Lines: []string{
			"000000-00",
			"000000-00",
			"-------00",
			"00-----00",
			"00-----00",
			"00-----00",
			"00-------",
			"00-000000",
			"00-000000",
		},
		Target: '0',
	}

	patternGlider = Pattern{
		Lines: []string{
			"0--",
			"-00",
			"00-",
		},
		Target: '0',
	}

	patternGliderGun = Pattern{
		Lines: []string{
			"------------------------0-----------",
			"----------------------0-0-----------",
			"------------00------00------------00",
			"-----------0---0----00------------00",
			"00--------0-----0---00--------------",
			"00--------0---0-00----0-0-----------",
			"----------0-----0-------0-----------",
			"-----------0---0--------------------",
			"------------00----------------------",
			"-----------------------0------------",
			"------------------------00----------",
			"-----------------------00-----------",
			"------------------------------------",
			"------------------------------------",
			"------------------------------------",
			"------------------------------------",
			"------------------------------------",
			"-------------------------------00---",
			"-------------------------------0-0--",
			"---------------------------------0--",
			"---------------------------------00-",
		},
		Target: '0',
	}
)

//type Composition []Point

func PointsFromPattern(p Pattern) (ps []life.Point) {
	var y = 0
	for _, line := range p.Lines {
		var x = 0
		data := []byte(line)
		for {
			r, size := utf8.DecodeRune(data)
			if size == 0 {
				break
			}
			data = data[size:]

			if r == p.Target {
				ps = append(ps, life.Point{x, y})
			}
			x++
		}
		y++
	}
	return
}
